#!/bin/sh

glidein_config="$1"

function warn {
 echo `date` parrot_setup: $@ 1>&2
}

function die {
 errorType="$1"
 shift
 warn ERROR: "$@"
 "$error_gen" -error parrot_setup "$errorType" "$@"
 exit 1
}

###########################################################
# import add_config_line and add_condor_vars_line functions

add_config_line_source=`grep '^ADD_CONFIG_LINE_SOURCE ' $glidein_config | awk '{print $2}'`
source $add_config_line_source

condor_vars_file=`grep -i "^CONDOR_VARS_FILE " $glidein_config | awk '{print $2}'`

# find error reporting helper script
error_gen=`grep '^ERROR_GEN_PATH ' $glidein_config | awk '{print $2}'`

# Is there a better way to find parrot_cfg?
parrot_cfg=$(find $(pwd) -name parrot_cfg)
if [ "$parrot_cfg" = "" ] || ! [ -f "$parrot_cfg" ]; then
  die VO_Config "No parrot_cfg found under `pwd`"
fi
add_config_line PARROT_CFG "$parrot_cfg"
. "$parrot_cfg"

# find the unpacked parrot.tgz tarball location

# this case is for <file> in the top-level scope of the frontend config
GLIDEIN_PARROT=`grep -i "^GLIDECLIENT_GLIDEIN_PARROT " $glidein_config | awk '{print $2}'`

if [ -z "$GLIDEIN_PARROT" ]; then
  # this case is for <file> in the group scope of the frontend config
  GLIDEIN_PARROT=`grep -i "^GLIDECLIENT_GROUP_GLIDEIN_PARROT " $glidein_config | awk '{print $2}'`
fi

if [ -z "$GLIDEIN_PARROT" ]; then
  # this case is for <file> in the factory config
  GLIDEIN_PARROT=`grep -i "^GLIDEIN_PARROT " $glidein_config | awk '{print $2}'`
fi

if [ -z "$GLIDEIN_PARROT" ]; then
  die VO_Config "No GLIDECLIENT_GLIDEIN_PARROT or GLIDECLIENT_GROUP_GLIDEIN_PARROT found in glidein config.  This could indicate that parrot.tgz was not included in the glidein files or absdir_outattr for this tarball was not set to GLIDEIN_PARROT."
fi

# untar location GLIDECLIENT_GLIDEIN_PARROT is directory containing untarred files
# point GLIDEIN_PARROT inside the directory contained within the tar file:
GLIDEIN_PARROT="$GLIDEIN_PARROT/parrot"

add_config_line GLIDEIN_PARROT "$GLIDEIN_PARROT"

# Unfortunately, the user can override GLIDEIN_PARROT and manipulate
# the wrapper, so instead of passing it to cvmfs_job_wrapper via the
# environment, we assume _CONDOR_SCRATCH_DIR will be a
# sub-(sub)-directory of the directory containing the following
# symlink:
ln -s $GLIDEIN_PARROT $(dirname $glidein_config)/GLIDEIN_PARROT

# configure CVMFS

# load balance across central proxies, if we use them
central_cvmfs_proxies="$CVMFS_PROXIES"

site_proxy=`grep -i "^PROXY_URL " $glidein_config | awk '{print $2}'`
if [ "$site_proxy" = "None" ]; then
  site_proxy=""
fi

if [ "$site_proxy" != "" ]; then
    warn "((((((((((((((((((((((((((("
    warn "Testing access to $CVMFS_TEST_REPO via proxy $site_proxy"

    wget_succeeded=0
    for attempt in 1 2 3; do
        if [ $attempt -gt 1 ]; then
            sleep 1
        fi
        wget_output=$(env http_proxy="$site_proxy" wget -qdO /dev/null $CVMFS_TEST_REPO/.cvmfspublished 2>&1)
      	wget_rc=$?

        echo "$wget_output"
        age=$(echo "$wget_output" | grep '^Age: *[1-9]')

        if [ "$wget_rc" != "0" ]; then
            warn "WARNING: proxy $http_proxy did NOT succeed in wget test, so not using it"
      	    break
        elif [ "$age" != "" ]; then
            warn "proxy $http_proxy succeeded in wget test"
      	    wget_succeeded=1
            break
      	else
            # this could mean the file was not already cached or the proxy does
            # not cache, so try 3 times before giving up
      	    warn "proxy	$http_proxy retrieved file but non-zero	age not	detected (attempt $attempt): $age"
        fi
    done
    if [ $wget_succeeded != 1 ]; then
        warn "WARNING: will not use proxy $http_proxy for CVMFS, using central proxies instead"
        site_proxy=""
    fi

    warn ")))))))))))))))))))))))))))"
fi

if [ "$site_proxy" != "" ]; then
  # only fail-over to central proxies if site proxy fails
  cvmfs_proxies="proxies=$site_proxy;$central_cvmfs_proxies"
else
  # no site proxy
  cvmfs_proxies="proxies=$central_cvmfs_proxies"
fi

PARROT_CVMFS_REPO="${PARROT_CVMFS_REPO},${cvmfs_proxies}"

PARROT_CVMFS_REPO=$(echo "$PARROT_CVMFS_REPO" | sed "s|GLIDEIN_PARROT_DIR|$GLIDEIN_PARROT|g")

export PARROT_CVMFS_REPO

echo "export PARROT_CVMFS_REPO=\"${PARROT_CVMFS_REPO}\"" > $GLIDEIN_PARROT/setup.sh \
  || die WN_Resource "failed to create parrot/setup.sh"

# Copy optional parrot options from parrot_cfg to the glidein config file
if ! [ -z "$GLIDEIN_PARROT_OPTIONS" ]; then
  echo "GLIDEIN_PARROT_OPTIONS=\"${GLIDEIN_PARROT_OPTIONS}\"" \
    >> $GLIDEIN_PARROT/setup.sh \
  || die WN_Resource "failed to append to parrot/setup.sh"
fi

if ! [ -z "$GlideinUseParrotIDBox" ]; then
  echo "GlideinUseParrotIDBox=\"${GlideinUseParrotIDBox}\"" \
    >> $GLIDEIN_PARROT/setup.sh \
  || die WN_Resource "failed to append to parrot/setup.sh"
fi

if [ "$CVMFS_OSG_APP" != "" ]; then
  # add CVMFS_OSG_APP to the job wrapper environment
  add_config_line CVMFS_OSG_APP $CVMFS_OSG_APP
  add_condor_vars_line CVMFS_OSG_APP "S" "-" "+" "N" "N" "+"
fi

FORCE_PARROT=0
if [ "$GlideinAlwaysUseParrotWrapper" != "" ] && [ "$GlideinAlwaysUseParrotWrapper" != "false" ]; then
  # The wrapper script will check for this file to see if it should always apply the parrot wrapper
  touch $GLIDEIN_PARROT/FORCE_PARROT
fi

parrot_tmp="${GLIDEIN_PARROT}/tmp1"
if "$GLIDEIN_PARROT/parrot_run" -t "$parrot_tmp" test -d $CVMFS_TEST_PATH; then

  # publish in the machine ad that this glidein supports parrot CVMFS
  add_condor_vars_line HasParrotCVMFS "C" "True" "+" "N" "Y" "-"

else
  warn "test of parrot_run failed with exit status $?."

  # do a simple wget test to see if that also fails
  for http_proxy in `echo $cvmfs_proxies | tr ';|' ' '`; do
    export http_proxy
    warn "((((((((((((((((((((((((((("
    warn "Testing access to $CVMFS_TEST_REPO via proxy $http_proxy"
    wget -O /dev/null $CVMFS_TEST_REPO/.cvmfspublished
    if [ "$?" != "0" ]; then
      warn "FAILURE: proxy $http_proxy did NOT succeed in wget test"
    else
      warn "proxy $http_proxy succeeded in wget test"
    fi
    warn ")))))))))))))))))))))))))))"
  done

  if [ "$GlideinRequiresParrotCVMFS" != "" ] && [ "$GlideinRequiresParrotCVMFS" != "false" ]; then
    die WN_Resource "aborting glidein setup, because parrot setup failed and was required"
  fi

  # Do not let jobs requiring CVMFS run here
  GLIDECLIENT_Start=`grep -i "^GLIDECLIENT_Start " $glidein_config | cut -d " " -f 2-`
  if [ "$GLIDECLIENT_Start" != "" ]; then
    GLIDECLIENT_Start="($GLIDECLIENT_Start) && "
  fi
  GLIDECLIENT_Start="${GLIDECLIENT_Start}TARGET.RequiresCVMFS=!=True"
  add_config_line GLIDECLIENT_Start "$GLIDECLIENT_Start"
fi

"$error_gen" -ok parrot_setup
